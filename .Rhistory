roxygen2::roxygenise()
?dplyr::tbl_df
#' Read a csv file
#'
#' @param filename The name of a csv file.
#' @return A tibble data framework.
#' @examples
#' add(1, 1)
#' add(10, 1)
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(caonima)
caonima <- c(0,1,2)
fars_read(caonima)
fars_read("/Users/peiranliu/Downloads/data/accident_2013.csv")
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(1992)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(1937)
fars_read_years(c(1,2,3,6))
fars_read_years(c(1973,1989))
fars_read_years(c(73,89))
fars_read_years(2013)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2013,2014,2015))
fars_read(accident_2013)
wtd
#' This is a function for reading a csv type document. External packages are implemented
#' including readr (for reading a file) and dplyr (for transforming into a tibble data
#' framework). The file name need to include a directory of the file. Otherwise, such a
#' function cannot read it successfully.
#'
#' @param filename The name of a csv file.
#' @return A tibble data framework.
#' @examples
#' fars_read("Desktop/accident_2013.csv")
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(accident_2013)
fars_read("accident_2013.csv")
fars_read("accident_2013.csv.bz2")
fars_read("accident_2013.csv.bz2")
fars_read_years(2013)
make_filename(2013)
fars_read("accident_2013.csv.bz2")
rp_data <- fars_read("accident_2013.csv.bz2")
dplyr::mutate(dat, year = 2013) %>%
dplyr::select(MONTH, 2013)
library(dplyr)
dplyr::mutate(dat, year = 2013) %>%
dplyr::select(MONTH, 2013)
dplyr::mutate(rp_data, year = 2013) %>%
dplyr::select(MONTH, 2013)
dplyr::select(MONTH, year)
dplyr::select(11, 2013)
dplyr::select(Jan, 2013)
x=c(1,2,3,4);
y=c(5, 7, 12, 13);
( m=lm(y~x) )
library(faraway)
m=lm(punting$Distance~ punting$Hang) ; qqnorm(resid(m)); qqline(resid(m))
#' This is a function for reading a csv type document. External packages are implemented
#' including readr (for reading a file) and dplyr (for transforming into a tibble data
#' framework). The file name need to include a directory of the file. Otherwise, such a
#' function cannot read it successfully.
#'
#' @param filename The name of a csv file.
#' @return A tibble data framework.
#' @examples
#' fars_read("Desktop/accident_2013.csv")
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("accident_2013.csv.bz2")
dat <- fars_read("accident_2013.csv.bz2")
mutate(dat, year=year)
dplyr""mutate(dat, year=year)
dplyr::mutate(dat, year=year)
dplyr::mutate(dat, year=2013)
dplyr::mutate(dat, year=2013) %>%
dplyr::select(MONTH, year)
library(dplyr)
dplyr::mutate(dat, year=2013) %>%
dplyr::select(MONTH, year)
?tryCatch
tryCatch(1, finally = print("Hello")
)
e <- simpleError("test error")
out <- fars_read_years(c(2013,2014))
#'
#' This function is used for read the months and years information from a document.
#'
#' @param years a vector of years.
#' @return a list of tibbles including months, years and errors if exist.
#'
#' @examples
#' fars_read_years(c(2013,2014))
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
out <- fars_read_years(c(2013,2014))
#' Generate a file name in a form of accident_year.csv.bz2
#'
#' This function is simply used for generating a file name without any external packages required.
#'
#' @param year A number of a year.
#' @return a name of the file including the year.
#' @examples
#' make_filename(1980.1)
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
out <- fars_read_years(c(2013,2014))
plyr::bind_rows(out) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
dplyr::bind_rows(out) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
tidyr
library(External packages are implemented
library(tidyr)
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm %>% spread(stock, price)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(10001, 2013)
fars_map_state(2, 2013)
fars_map_state(1, 2013)
roxygen2::roxygenise()
